<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper是根标签，namespace属性：在Mybatis全局范围内找到一个具体的Mapper配置 -->
<!-- 引入接口后，为了方便通过接口全类名来找到Mapper配置文件，所以通常将namespace属性设置为接口全类名 -->
<mapper namespace="com.shaoyx.mybatis.mapper.UserMapper">
	
	<!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 -->
	<!-- resultType属性：指定封装查询结果的Java实体类的全类名 -->
	<!--
		mapper接口和映射文件要保证两个一致
		1、mapper接口的全类名和映射文件的namespace一致
		2、mapper接口中的方法名和映射文件中的sql的id保持一致
	-->
	
	<!--int insertUser();-->
	<insert id="insertUser">
		insert t_user( username, password, age, gender, email)
		values ('root', '123456', 23, '男', '12345@qq.com');
	</insert>
	
	
	<!--int updateUser();-->
	<update id="updateUser">
		update t_user
		set username='root',
		    password='123'
		where id = '1';
	</update>
	
	
	<delete id="deleteUser">
		delete
		from t_user
		where id = 4;
	</delete>
	
	<!--User getUserById()-->
	<!--
		resultType:设置结果类型，即查询的数据要转换为的java类型
		resultMap:自定义映射，处理多对一或一对多的映射关系和属性名不一致的情况
	-->
	<select id="getUserById" resultType="com.shaoyx.mybatis.pojo.User">
		
		select id, username, password, age, gender, email
		from t_user
		where `id` = #{id};
	</select>
	
	<!--List<User> getAllUser()-->
	<select id="getAllUser" resultType="User">
		select id, username, password, age, gender, email
		from t_user;
	</select>

</mapper>
